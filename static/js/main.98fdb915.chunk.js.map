{"version":3,"sources":["components/Form/form.js","components/Error/error.js","components/Weather/weather.js","components/Navbar/navbar.js","App.js","constants/apiConstants.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCountryChange","event","setState","country","target","value","handleCityChange","city","handleOnClickSubmit","e","preventDefault","loadWeather","state","handleFormClick","resetForm","submitted","react_default","a","createElement","id","className","type","name","placeholder","onChange","autoFocus","onClick","Component","Error","toggleError","duration","setTimeout","unmountMe","message","Sun","src","alt","Weather","loaded","description","temperature","code","weather_Sun","maxtemp","mintemp","navigationTabs","Navbar","activeTab","clickedTab","_this2","map","tab","i","key","changeTabOnClick","bind","buildApiRequestUrl","concat","App","undefined","maxTemp","minTemp","humidity","searched","error","showError","handleError","errorMessage","getWeather","form","apiRequest","axios","get","then","response","weather","data","main","temp","temp_max","temp_min","sys","console","log","icon","catch","err","unmountErrorNotification","components_Form_form","navbar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98fdb915.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './form.css';\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            city: '',\r\n            country: '',\r\n            submitted: false,\r\n        }\r\n    }\r\n\r\n    handleCountryChange = (event) => {\r\n        this.setState({\r\n            country: event.target.value\r\n        })\r\n    }\r\n\r\n    handleCityChange = (event) => {\r\n        this.setState({\r\n            city: event.target.value\r\n        })\r\n    }\r\n\r\n    handleOnClickSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.loadWeather(this.state);\r\n        this.props.handleFormClick();\r\n        this.resetForm();\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState({\r\n            city: '',\r\n            country: '',\r\n            submitted: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form id=\"weatherForm\" className=\"Form\">\r\n                <input \r\n                    className=\"Form__input\"\r\n                    type=\"text\"\r\n                    name=\"city\"\r\n                    value={this.state.city}\r\n                    placeholder={(this.state.submitted ? 'Another city..' : 'City..')}\r\n                    onChange={this.handleCityChange}\r\n                    autoFocus\r\n                />\r\n\r\n                <input \r\n                    className=\"Form__input\"\r\n                    type=\"text\"\r\n                    name=\"country\"\r\n                    placeholder=\"Country...\"\r\n                    value={this.state.country}\r\n                    onChange={this.handleCountryChange}\r\n                />\r\n\r\n                <button \r\n                    onClick={this.handleOnClickSubmit} \r\n                    type=\"submit\" \r\n                    className=\"Form__submit\">\r\n                    {(this.state.submitted ? \"Find another place\" : 'Look up the weather')}\r\n                </button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport './styles.css';\r\n\r\nclass Error extends Component {\r\n    constructor(props) {\r\n        super();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.toggleError(2000)\r\n    }\r\n\r\n    toggleError = (duration) => {\r\n        setTimeout(() => {\r\n            this.props.unmountMe();\r\n        }, duration);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Error\">\r\n                <span>{this.props.message}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Error;","import React, { Component } from 'react';\r\nimport './styles.css';\r\nimport '../Error/error';\r\n//import Preloader from '../Preloader/preloader';\r\n\r\n\r\n/*\r\n * TO-DO: refactor stateless components to object literals\r\n */\r\nconst Sun = () => <img className=\"Weather_sun floating\" src=\"./weather_icons/sun.png\" alt=\"Sun\"/>;\r\nconst Cloud = () => <img className=\"Weather_sun floating\" src=\"./weather_icons/cloud.png\" alt=\"Sun\" />;\r\n\r\n// const drawings = {\r\n//     sun: '<img className=\"Weather_sun floating\" src=\"./sun.png\" alt=\"Sun\"/>',\r\n//     clouds: '',\r\n//     rain: ''\r\n// }\r\n\r\nclass Weather extends Component {\r\n    constructor(props) {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"Weather\" + (this.props.loaded && this.props.description ? \" found\" : '')}>\r\n                <div className=\"Weather__info\">\r\n                { \r\n                    this.props.country && this.props.city && \r\n                    <div className=\"weather__location\">\r\n                        <h1>{this.props.city}</h1>\r\n                    </div> \r\n                }\r\n                { \r\n                    this.props.description && \r\n                    <div className=\"weather__description\">\r\n                        <span>{this.props.description}</span>  \r\n                    </div>\r\n                }\r\n                {\r\n                    this.props.temperature &&\r\n                    <div className=\"weather__temperature\">\r\n                        <span>{this.props.temperature}º</span>\r\n                    </div>\r\n                }\r\n                {\r\n                    this.props.code &&\r\n                    <Sun></Sun>\r\n                }\r\n                { \r\n                    this.props.maxtemp && this.props.mintemp &&\r\n                    <div className=\"weather__ranges\">\r\n                        <span className=\"weather_mintemp\">{this.props.mintemp}º</span>\r\n                        <span className=\"weather_maxtemp\">{this.props.maxtemp}º</span>\r\n                    </div>\r\n                }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Weather;","import React, { Component } from 'react';\r\nimport './styles.css';\r\n\r\nconst navigationTabs = [\r\n    'current', \r\n    'forecast', \r\n    'find me',\r\n];\r\nclass Navbar extends Component {\r\n    state = { \r\n        activeTab: 'current' \r\n    }\r\n\r\n    changeTabOnClick(clickedTab) {\r\n        this.setState({ activeTab: clickedTab }) \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Navbar\">\r\n                { \r\n                    navigationTabs.map((tab, i) => \r\n                    <button key={i} className={\"Navbar__tab\" + (this.state.activeTab === tab ? ' active' : '')} onClick={this.changeTabOnClick.bind(this, tab)}>\r\n                        { tab } \r\n                    </button>) \r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Form from './components/Form/form';\r\nimport Weather from './components/Weather/weather';\r\nimport Navbar from './components/Navbar/navbar';\r\nimport Error from './components/Error/error';\r\n\r\nimport './styles.css';\r\nimport * as api from './constants/apiConstants';\r\n\r\nconst buildApiRequestUrl = (city, country) => \r\n  `${api.BASE_URL}?q=${city},${country}&appid=${api.APP_ID}&${api.OPTIONS}`;\r\n\r\nclass App extends Component {\r\n  state = {\r\n    temperature: undefined,\r\n    maxTemp: undefined,\r\n    minTemp: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    code: undefined, // Will determine which cute illustration to mount\r\n    searched: false,\r\n    loaded: false, // Defines preloader mounting/unmounting\r\n    error: null,\r\n    showError: true, // For text control on Form component\r\n  }\r\n\r\n  handleFormClick = (e) => {\r\n    this.setState({\r\n      searched: true\r\n    })\r\n  }\r\n\r\n  handleError = (errorMessage) => {\r\n    this.setState({\r\n      showError: true,\r\n      error: errorMessage\r\n    })\r\n  }\r\n\r\n  getWeather = (form) => {\r\n    const city = form.city;\r\n    const country = form.country;\r\n    const apiRequest = buildApiRequestUrl(city, country);\r\n\r\n    if(city && country) {\r\n      axios.get(apiRequest)\r\n        .then(response => {\r\n          const weather = response.data;\r\n          this.setState({\r\n            temperature: weather.main.temp,\r\n            maxTemp: weather.main.temp_max,\r\n            minTemp: weather.main.temp_min,\r\n            city: weather.name,\r\n            country: weather.sys.country,\r\n            humidity: weather.main.humidity,\r\n            description: weather.weather[0].description,\r\n            code: weather.weather[0],\r\n            error: null,\r\n            showError: true,\r\n            loaded: true\r\n          })\r\n          console.log(weather.weather[0].icon) // To recompile codes for stateless icon components\r\n        })\r\n        .catch(err => {\r\n            this.handleError('Is that even a place? Try another location!');\r\n        })\r\n    } else {\r\n        this.handleError('Please fill both inputs before searching..');\r\n    }\r\n  }\r\n\r\n  unmountErrorNotification = () => {\r\n    this.setState({\r\n      showError: false\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n          <Form \r\n            loadWeather={this.getWeather} \r\n            handleFormClick={this.handleFormClick}\r\n            handleError={this.handleError}\r\n          />\r\n\r\n          { this.state.searched && this.state.loaded ?\r\n            <Weather\r\n              temperature={this.state.temperature}\r\n              maxtemp={this.state.maxTemp}\r\n              mintemp={this.state.minTemp}\r\n              city={this.state.city}\r\n              country={this.state.country}\r\n              humidity={this.state.humidity}\r\n              description={this.state.description}\r\n              code={this.state.code}\r\n              error={this.state.error}\r\n              loaded={this.state.loaded}\r\n              searched={this.state.searched} // @TO-DO: Apply CSSTransition on mount so this prop is not necessary \r\n            />\r\n          : null }\r\n\r\n          { this.state.showError && this.state.error ?\r\n            <Error \r\n              message={this.state.error} \r\n              unmountMe={this.unmountErrorNotification}\r\n            /> \r\n            : null \r\n          }\r\n\r\n          <Navbar/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","export const APP_ID = \"8d2de98e089f1c28e1a22fc19a24ef04\";\r\nexport const BASE_URL ='http://api.openweathermap.org/data/2.5/weather';\r\nexport const OPTIONS = 'units=metric';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './resets.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}