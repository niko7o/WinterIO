{"version":3,"sources":["components/Form/form.js","constants/weatherConstants.js","components/Error/error.js","components/Weather/weather.js","components/Navbar/navbar.js","App.js","constants/apiConstants.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCountryChange","event","setState","country","target","value","handleCityChange","city","handleOnClickSubmit","e","preventDefault","loadWeather","state","handleFormClick","resetForm","submitted","react_default","a","createElement","id","className","type","name","placeholder","onChange","autoFocus","onClick","Component","CODE_ICONS","01d","01n","04d","02d","02n","03n","10n","50d","Error","toggleError","duration","setTimeout","unmountMe","message","WeatherCodeIcon","_ref","code","src","weather","alt","Weather","loaded","description","temperature","weather_WeatherCodeIcon","maxtemp","mintemp","navigationTabs","Navbar","activeTab","clickedTab","_this2","map","tab","i","key","changeTabOnClick","bind","buildApiRequestUrl","concat","App","time","undefined","maxTemp","minTemp","humidity","searched","error","showError","handleError","errorMessage","increaseTime","multiplier","previousState","getWeather","form","apiRequest","axios","get","then","response","data","main","temp","temp_max","temp_min","sys","icon","console","log","catch","err","unmountErrorNotification","setInterval","components_Form_form","navbar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eee740ed.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './form.css';\n\nclass Form extends Component {\n    constructor(props) {\n        super();\n        this.state = {\n            city: '',\n            country: '',\n            submitted: false,\n        }\n    }\n\n    handleCountryChange = (event) => {\n        this.setState({\n            country: event.target.value\n        })\n    }\n\n    handleCityChange = (event) => {\n        this.setState({\n            city: event.target.value\n        })\n    }\n\n    handleOnClickSubmit = (e) => {\n        e.preventDefault();\n        this.props.loadWeather(this.state);\n        this.props.handleFormClick();\n        this.resetForm();\n    }\n\n    resetForm = () => {\n        this.setState({\n            city: '',\n            country: '',\n            submitted: true\n        })\n    }\n\n    render() {\n        return (\n            <form id=\"weatherForm\" className=\"Form\">\n                <input \n                    className=\"Form__input\"\n                    type=\"text\"\n                    name=\"city\"\n                    value={this.state.city}\n                    placeholder={(this.state.submitted ? 'Another city..' : 'City..')}\n                    onChange={this.handleCityChange}\n                    autoFocus\n                />\n\n                <input \n                    className=\"Form__input\"\n                    type=\"text\"\n                    name=\"country\"\n                    placeholder=\"Country...\"\n                    value={this.state.country}\n                    onChange={this.handleCountryChange}\n                />\n\n                <button \n                    onClick={this.handleOnClickSubmit} \n                    type=\"submit\" \n                    className=\"Form__submit\">\n                    {(this.state.submitted ? \"Find another place\" : 'Look up the weather')}\n                </button>\n            </form>\n        )\n    }\n}\n\nexport default Form;","export const CODE_ICONS = {\n    '01d': '../../weather_icons/sun.png', // clear skies\n    '01n': '../../weather_icons/sun.png', // clear skies\n    '04d': '../../weather_icons/cloud.png', // broken clouds\n    '02d': '../../weather_icons/cloud.png', // few clouds\n    '02n': '../../weather_icons/cloud.png', // few clouds\n    '03n': '../../weather_icons/cloud.png', // scattered clouds\n    '10n': '../../weather_icons/rain.gif', // light rain\n    '50d': '../../weather_icons/mist.png', // mist, fog\n}","import React, { Component } from 'react';\nimport './styles.css';\n\nclass Error extends Component {\n    constructor(props) {\n        super();\n    }\n\n    componentDidMount() {\n        this.toggleError(2000)\n    }\n\n    toggleError = (duration) => {\n        setTimeout(() => {\n            this.props.unmountMe();\n        }, duration);\n    }\n\n    render() {\n        return (\n            <div className=\"Error\">\n                <span>{this.props.message}</span>\n            </div>\n        )\n    }\n}\n\nexport default Error;","import React, { Component } from 'react';\nimport * as weather from '../../constants/weatherConstants';\nimport './styles.css';\nimport '../Error/error';\n\nconst WeatherCodeIcon = ({code}) =>\n    <img \n        className=\"weather_icon floating\" \n        src={weather.CODE_ICONS[code]} \n        alt=\"icon\"\n    />\n\nclass Weather extends Component {\n    render() {\n        return (\n            <div className={\"Weather\" + (this.props.loaded && this.props.description ? \" found\" : '')}>\n                <div className=\"Weather__info\">\n                { \n                    this.props.country && this.props.city && \n                    <div className=\"weather__location\">\n                        <h1>{this.props.city}</h1>\n                    </div> \n                }\n                { \n                    this.props.description && \n                    <div className=\"weather__description\">\n                        <span>{this.props.description}</span>  \n                    </div>\n                }\n                {\n                    this.props.temperature &&\n                    <div className=\"weather__temperature\">\n                        <span>{this.props.temperature}º</span>\n                    </div>\n                }\n                {\n                    <WeatherCodeIcon\n                        code={this.props.code} \n                    />\n                }\n                { \n                    this.props.maxtemp && this.props.mintemp &&\n                    <div className=\"weather__ranges\">\n                        <span className=\"weather_mintemp\">{this.props.mintemp}º</span>\n                        <span className=\"weather_maxtemp\">{this.props.maxtemp}º</span>\n                    </div>\n                }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Weather;","import React, { Component } from 'react';\nimport './styles.css';\n\nconst navigationTabs = [\n    'weather', \n    'forecast', \n    'find me',\n];\nclass Navbar extends Component {\n    state = { \n        activeTab: 'weather' \n    }\n\n    changeTabOnClick(clickedTab) {\n        this.setState({ \n            activeTab: clickedTab \n        }) \n    }\n\n    render() {\n        return (\n            <div className=\"Navbar\">\n                { \n                    navigationTabs.map((tab, i) => \n                    <button key={i} className={\"Navbar__tab\" + (this.state.activeTab === tab ? ' active' : '')} onClick={this.changeTabOnClick.bind(this, tab)}>\n                        { tab } \n                    </button>) \n                }\n            </div>\n        )\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Form from './components/Form/form';\nimport Weather from './components/Weather/weather';\nimport Navbar from './components/Navbar/navbar';\nimport Error from './components/Error/error';\nimport './styles.css';\nimport * as api from './constants/apiConstants';\n\nconst buildApiRequestUrl = (city, country) => \n  `${api.BASE_URL}?q=${city},${country}&appid=${api.APP_ID}&${api.OPTIONS}`;\n\nclass App extends Component {\n  state = {\n    time: 0, // Date.now\n    temperature: undefined,\n    maxTemp: undefined,\n    minTemp: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    code: undefined, // Will determine which cute illustration to mount\n    searched: false,\n    loaded: false, // Defines preloader mounting/unmounting\n    error: null,\n    showError: true, // For text control on Form component\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.increaseTime(1);\n    }, 1000)\n  }\n\n  componentDidUpdate() {\n    //console.log(this.state.time)\n  }\n\n  handleFormClick = (e) => {\n    this.setState({\n      searched: true\n    })\n  }\n\n  handleError = (errorMessage) => {\n    this.setState({\n      showError: true,\n      error: errorMessage\n    })\n  }\n\n  increaseTime = (multiplier) => {\n    this.setState(function (previousState) {\n      return {\n        time: previousState.time + 1\n      };\n    });\n  }\n\n  getWeather = (form) => {\n    const city = form.city;\n    const country = form.country;\n    const apiRequest = buildApiRequestUrl(city, country);\n\n    if(city && country) {\n      axios.get(apiRequest)\n        .then(response => {\n          const weather = response.data;\n          this.setState({\n            temperature: weather.main.temp,\n            maxTemp: weather.main.temp_max,\n            minTemp: weather.main.temp_min,\n            city: weather.name,\n            country: weather.sys.country,\n            humidity: weather.main.humidity,\n            description: weather.weather[0].description,\n            code: weather.weather[0].icon,\n            error: null,\n            showError: true,\n            loaded: true\n          })\n          console.log(weather.weather[0].icon) // To recompile codes for stateless icon components\n        })\n        .catch(err => {\n            this.handleError('Is that even a place? Try another location!');\n        })\n    } else {\n        this.handleError('Please fill both inputs before searching..');\n    }\n  }\n\n  unmountErrorNotification = () => {\n    this.setState({\n      showError: false\n    })\n  }\n\n  render() {\n    return (\n      /* @TO-DO: Depending on this.state.time, change the background of the app dynamically */\n      <div className=\"App\">\n          <Form \n            loadWeather={this.getWeather} \n            handleFormClick={this.handleFormClick}\n            handleError={this.handleError}\n          />\n\n          { this.state.searched && this.state.loaded ?\n            <Weather\n              temperature={this.state.temperature}\n              maxtemp={this.state.maxTemp}\n              mintemp={this.state.minTemp}\n              city={this.state.city}\n              country={this.state.country}\n              humidity={this.state.humidity}\n              description={this.state.description}\n              code={this.state.code}\n              error={this.state.error}\n              loaded={this.state.loaded}\n              searched={this.state.searched} // @TO-DO: Apply CSSTransition on mount so this prop is not necessary \n            />\n          : null }\n\n          { this.state.showError && this.state.error ?\n            <Error \n              message={this.state.error} \n              unmountMe={this.unmountErrorNotification}\n            /> \n            : null \n          }\n\n          <Navbar/>\n      </div>\n    )\n  }\n}\n\nexport default App;","export const APP_ID = \"8d2de98e089f1c28e1a22fc19a24ef04\";\nexport const BASE_URL ='https://api.openweathermap.org/data/2.5/weather';\nexport const OPTIONS = 'units=metric';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './resets.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}