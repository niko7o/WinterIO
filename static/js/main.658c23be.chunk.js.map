{"version":3,"sources":["components/Form/form.js","constants/weatherConstants.js","components/Error/error.js","components/Weather/weather.js","components/Navbar/navbar.js","components/Geolocator/geolocator.js","constants/apiConstants.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCountryChange","event","setState","country","target","value","handleCityChange","city","handleOnClickSubmit","e","preventDefault","loadWeather","state","handleFormClick","resetForm","submitted","react_default","a","createElement","id","className","type","name","placeholder","onChange","autoFocus","onClick","Component","CODE_ICONS_SVG","01d","01n","02d","02n","03n","03d","04d","04n","50d","50n","10n","10d","Error","toggleError","duration","setTimeout","unmountMe","message","WeatherCodeIcon","_ref","code","src","weather","alt","Weather","loaded","description","temperature","weather_WeatherCodeIcon","maxtemp","mintemp","navigationTabs","Navbar","activeTab","clickedTab","changeTabState","console","log","_this2","map","tab","i","key","changeTabOnClick","bind","Geolocator","lat","undefined","lng","error","requested","onLocateSuccess","position","coords","latitude","longitude","getGeoWeather","onLocateError","err","handleError","getLocation","navigator","geolocation","getCurrentPosition","enableHighAccuracy","maximumAge","timeout","APP_ID","BASE_URL","buildApiSearchRequestUrl","concat","api","buildApiGeoRequestUrl","buildForecastRequestUrl","App","maxTemp","minTemp","humidity","searched","showError","newTab","errorMessage","getForecast","form","apiForecastRequest","axios","get","then","response","data","main","temp","temp_max","temp_min","sys","icon","catch","apiGeoRequest","getWeather","apiSearchRequest","unmountErrorNotification","geolocator","components_Form_form","navbar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.658c23be.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './form.css';\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            city: '',\r\n            country: '',\r\n            submitted: false,\r\n        }\r\n    }\r\n\r\n    handleCountryChange = (event) => {\r\n        this.setState({\r\n            country: event.target.value\r\n        })\r\n    }\r\n\r\n    handleCityChange = (event) => {\r\n        this.setState({\r\n            city: event.target.value\r\n        })\r\n    }\r\n\r\n    handleOnClickSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.loadWeather(this.state);\r\n        this.props.handleFormClick();\r\n        this.resetForm();\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState({\r\n            city: '',\r\n            country: '',\r\n            submitted: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form id=\"weatherForm\" className=\"Form\">\r\n                <input \r\n                    className=\"Form__input\"\r\n                    type=\"text\"\r\n                    name=\"city\"\r\n                    value={this.state.city}\r\n                    placeholder={(this.state.submitted ? 'Another city..' : 'City..')}\r\n                    onChange={this.handleCityChange}\r\n                    autoFocus\r\n                />\r\n\r\n                <input \r\n                    className=\"Form__input\"\r\n                    type=\"text\"\r\n                    name=\"country\"\r\n                    placeholder=\"Country...\"\r\n                    value={this.state.country}\r\n                    onChange={this.handleCountryChange}\r\n                />\r\n\r\n                <button \r\n                    onClick={this.handleOnClickSubmit} \r\n                    type=\"submit\" \r\n                    className=\"Form__submit\">\r\n                    {(this.state.submitted ? \"Find another place\" : 'Look up the weather')}\r\n                </button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","export const CODE_ICONS_SVG = {\r\n    '01d': '../../weather_svg/sun.svg', // clear skies\r\n    '01n': '../../weather_svg/sun.svg', // clear skies\r\n    '02d': '../../weather_svg/cloudy.svg', // few clouds\r\n    '02n': '../../weather_svg/cloudy.svg', // few clouds\r\n    '03n': '../../weather_svg/cloudy.svg', // scattered clouds\r\n    '03d': '../../weather_svg/cloudy.svg', // scattered clouds\r\n    '04d': '../../weather_svg/cloudy.svg', // broken clouds\r\n    '04n': '../../weather_svg/brokenclouds.svg', // broken clouds\r\n    '50d': '../../weather_svg/cloudy.svg', //fog\r\n    '50n': '../../weather_svg/mist.svg',  // mist\r\n    '10n': '../../weather_svg/rainy.svg', // light rain\r\n    '10d': '../../weather_svg/rainy.svg', // light rain\r\n}","import React, { Component } from 'react';\r\nimport './styles.css';\r\n\r\nclass Error extends Component {\r\n\r\n    componentDidMount() {\r\n        this.toggleError(2000)\r\n    }\r\n\r\n    toggleError = (duration) => {\r\n        setTimeout(() => {\r\n            this.props.unmountMe();\r\n        }, duration);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Error\">\r\n                <span>{this.props.message}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Error;","import React, { Component } from 'react';\r\nimport * as weather from '../../constants/weatherConstants';\r\nimport './styles.css';\r\nimport '../Error/error';\r\n\r\nconst WeatherCodeIcon = ({code}) =>\r\n    <img \r\n        className=\"weather_icon floating\" \r\n        src={weather.CODE_ICONS_SVG[code]} \r\n        alt=\"icon\"\r\n    />\r\n\r\nclass Weather extends Component {\r\n    render() {\r\n        return (\r\n            <div className={\"Weather\" + (this.props.loaded && this.props.description ? \" found\" : '')}>\r\n                <div className=\"Weather__info\">\r\n                { \r\n                    this.props.country && this.props.city && \r\n                    <div className=\"Weather__location\">\r\n                        <h1>{this.props.city}</h1>\r\n                    </div> \r\n                }\r\n                { \r\n                    this.props.description && \r\n                    <div className=\"Weather__description\">\r\n                        <span>{this.props.description}</span>  \r\n                    </div>\r\n                }\r\n                {\r\n                    this.props.temperature &&\r\n                    <div className=\"Weather__temperature\">\r\n                        <span>{this.props.temperature}º</span>\r\n                    </div>\r\n                }\r\n                {\r\n                    <WeatherCodeIcon code={this.props.code} />\r\n                }\r\n                { \r\n                    this.props.maxtemp && this.props.mintemp &&\r\n                    <div className=\"Weather__ranges\">\r\n                        <span className=\"Weather__mintemp\">{this.props.mintemp}º</span>\r\n                        <span className=\"Weather__maxtemp\">{this.props.maxtemp}º</span>\r\n                    </div>\r\n                }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Weather;","import React, { Component } from 'react';\r\nimport './styles.css';\r\n\r\nconst navigationTabs = [\r\n    'current', \r\n    'forecast',\r\n];\r\n\r\nclass Navbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activeTab: 'current'\r\n        }\r\n    }\r\n\r\n    changeTabOnClick(clickedTab) {\r\n        this.setState({ activeTab: clickedTab })\r\n        this.props.changeTabState(clickedTab);\r\n        console.log(this.state.activeTab)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Navbar\">\r\n                { \r\n                    navigationTabs.map((tab, i) => \r\n                    <button \r\n                        key={i} \r\n                        className={\"Navbar__tab\" + (this.state.activeTab === tab ? ' active' : '')} \r\n                        onClick={this.changeTabOnClick.bind(this, tab)}\r\n                    >\r\n                        { tab } \r\n                    </button>) \r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport './styles.css';\r\nimport '../Error/error';\r\n\r\nclass Geolocator extends Component {\r\n       \r\n    state = {\r\n        lat: undefined,\r\n        lng: undefined,\r\n        error: undefined,\r\n        requested: false,\r\n        loaded: false,\r\n    }\r\n\r\n    onLocateSuccess = position => {\r\n        const coords = position.coords;\r\n        this.setState({\r\n            lat: coords.latitude,\r\n            lng: coords.longitude,\r\n            requested: true,\r\n            loaded: true\r\n        })\r\n        console.log(this.state.lat, this.state.lng)\r\n        this.props.getGeoWeather(this.state.lat, this.state.lng);\r\n    }\r\n\r\n    onLocateError = err => {\r\n        this.setState({\r\n            requested: true,\r\n            loaded: true,\r\n            error: err.message\r\n        })\r\n        this.props.handleError(err.message)\r\n    }\r\n\r\n    getLocation = () => {\r\n        this.setState({\r\n            requested: true,\r\n            loaded: false\r\n        })\r\n\r\n        const options = {\r\n            enableHighAccuracy: true,\r\n            maximumAge: 0,\r\n            timeout: 15000\r\n        };\r\n\r\n        navigator.geolocation.getCurrentPosition(this.onLocateSuccess, this.onLocateError, options);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <img \r\n                src=\"../../assets/geolocate.svg\"\r\n                className={\"Geolocator__icon\" + (this.state.requested && !this.state.loaded ? ' spin' : '')}\r\n                alt=\"Geolocate me\"\r\n                onClick={this.getLocation}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Geolocator;","export const APP_ID = \"8d2de98e089f1c28e1a22fc19a24ef04\";\r\nexport const BASE_URL ='https://api.openweathermap.org/data/2.5/weather';\r\nexport const OPTIONS = 'units=metric';","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Components\r\nimport Form from './components/Form/form';\r\nimport Weather from './components/Weather/weather';\r\nimport Navbar from './components/Navbar/navbar';\r\nimport Error from './components/Error/error';\r\nimport Geolocator from './components/Geolocator/geolocator';\r\n\r\nimport './styles.css';\r\nimport * as api from './constants/apiConstants';\r\n\r\nconst buildApiSearchRequestUrl = (city, country) => `${api.BASE_URL}?q=${city},${country}&appid=${api.APP_ID}&${api.OPTIONS}`;\r\nconst buildApiGeoRequestUrl = (lat, lng) => `${api.BASE_URL}?lat=${lat}&lon=${lng}&appid=${api.APP_ID}&${api.OPTIONS}`;\r\nconst buildForecastRequestUrl = (city, country) => `${api.BASE_URL}?q=${city},${country}&appid=${api.APP_ID}&${api.OPTIONS}`;\r\n\r\nclass App extends Component {\r\n  state = {\r\n    tab: 'current',\r\n    temperature: undefined,\r\n    maxTemp: undefined,\r\n    minTemp: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    code: undefined, // Will determine which cute illustration to mount\r\n    searched: false,\r\n    loaded: false, // Defines preloader mounting/unmounting\r\n    error: null,\r\n    showError: true, // For text control on Form component\r\n  }\r\n\r\n  changeTabState = newTab => {\r\n    this.setState({\r\n      tab: newTab\r\n    })\r\n  }\r\n\r\n  handleFormClick = (e) => {\r\n    this.setState({\r\n      searched: true\r\n    })\r\n  }\r\n\r\n  handleError = (errorMessage) => {\r\n    this.setState({\r\n      showError: true,\r\n      error: errorMessage\r\n    })\r\n  }\r\n\r\n  getForecast = (form) => {\r\n    const city = form.city;\r\n    const country = form.country;\r\n    const apiForecastRequest = buildForecastRequestUrl(city, country);\r\n\r\n    if (city && country) {\r\n      axios.get(apiForecastRequest)\r\n        .then(response => {\r\n          const weather = response.data;\r\n          this.setState({\r\n            temperature: weather.main.temp,\r\n            maxTemp: weather.main.temp_max,\r\n            minTemp: weather.main.temp_min,\r\n            city: weather.name,\r\n            country: weather.sys.country,\r\n            humidity: weather.main.humidity,\r\n            description: weather.weather[0].description,\r\n            code: weather.weather[0].icon,\r\n            error: null,\r\n            showError: true,\r\n            loaded: true,\r\n            searched: true\r\n          })\r\n        })\r\n        .catch(err => {\r\n          this.handleError('Is that even a place? Try another location!');\r\n        })\r\n    } else {\r\n      this.handleError('Please fill both inputs before searching..');\r\n    }\r\n  }\r\n\r\n  getGeoWeather = (lat, lng) => {\r\n    const apiGeoRequest = buildApiGeoRequestUrl(lat, lng);\r\n\r\n    if(lat && lng) {\r\n      axios.get(apiGeoRequest)\r\n      .then(response => {\r\n        const weather = response.data;\r\n        this.setState({\r\n          temperature: weather.main.temp,\r\n          maxTemp: weather.main.temp_max,\r\n          minTemp: weather.main.temp_min,\r\n          city: weather.name,\r\n          country: weather.sys.country,\r\n          humidity: weather.main.humidity,\r\n          description: weather.weather[0].description,\r\n          code: weather.weather[0].icon,\r\n          error: null,\r\n          showError: true,\r\n          loaded: true,\r\n          searched: true,\r\n        })\r\n      }).catch(err => {\r\n        this.handleError(err);\r\n      })\r\n    }\r\n  }\r\n\r\n  getWeather = (form) => {\r\n    const city = form.city;\r\n    const country = form.country;\r\n    const apiSearchRequest = buildApiSearchRequestUrl(city, country);\r\n\r\n    if(city && country) {\r\n      axios.get(apiSearchRequest)\r\n        .then(response => {\r\n          const weather = response.data;\r\n          this.setState({\r\n            temperature: weather.main.temp,\r\n            maxTemp: weather.main.temp_max,\r\n            minTemp: weather.main.temp_min,\r\n            city: weather.name,\r\n            country: weather.sys.country,\r\n            humidity: weather.main.humidity,\r\n            description: weather.weather[0].description,\r\n            code: weather.weather[0].icon,\r\n            error: null,\r\n            showError: true,\r\n            loaded: true,\r\n            searched: true\r\n          })\r\n          console.log(weather.weather[0].icon) //@TO-DO: Delete this. Temporary to recompile codes returned form api for weather svgs\r\n        })\r\n        .catch(err => {\r\n            this.handleError('Is that even a place? Try another location!');\r\n        })\r\n    } else {\r\n        this.handleError('Please fill both inputs before searching..');\r\n    }\r\n  }\r\n\r\n  unmountErrorNotification = () => {\r\n    this.setState({\r\n      showError: false\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n          <Geolocator \r\n            handleError={this.handleError}\r\n            getGeoWeather={this.getGeoWeather}\r\n          />\r\n\r\n          <Form \r\n            loadWeather={this.getWeather} \r\n            handleFormClick={this.handleFormClick}\r\n            handleError={this.handleError}\r\n          />\r\n\r\n          { this.state.searched && this.state.loaded ?\r\n            <Weather\r\n              temperature={this.state.temperature}\r\n              maxtemp={this.state.maxTemp}\r\n              mintemp={this.state.minTemp}\r\n              city={this.state.city}\r\n              country={this.state.country}\r\n              humidity={this.state.humidity}\r\n              description={this.state.description}\r\n              code={this.state.code}\r\n              error={this.state.error}\r\n              loaded={this.state.loaded}\r\n              searched={this.state.searched} // @TO-DO: Apply CSSTransition on mount so this prop is not necessary \r\n            />\r\n          : null }\r\n\r\n          { this.state.showError && this.state.error ?\r\n            <Error \r\n              message={this.state.error} \r\n              unmountMe={this.unmountErrorNotification}\r\n            /> \r\n            : null \r\n          }\r\n\r\n          <Navbar\r\n            changeTabState={this.changeTabState}\r\n            getForecast={this.getForecast}\r\n          />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './resets.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}