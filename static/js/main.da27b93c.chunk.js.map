{"version":3,"sources":["components/Spinner/spinner.js","constants/apiConstants.js","components/Form/form.js","components/Navbar/navbar.js","components/Geolocator/geolocator.js","App.js","serviceWorker.js","index.js","components/Error/error.js"],"names":["Spinner","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","Component","APP_ID","BASE_URL","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCountryChange","event","setState","country","target","value","handleCityChange","city","handleOnClickSubmit","e","preventDefault","searchWeatherBy","state","handleFormClick","resetForm","submitted","react_default","id","type","name","placeholder","onChange","autoFocus","autoComplete","onClick","Navbar","changeTabOnClick","clickedTab","tab","changeTabState","_this2","Geolocator","lat","undefined","lng","error","requested","loaded","onLocateSuccess","position","coords","latitude","longitude","onLocateError","err","message","handleError","getLocation","navigator","geolocation","getCurrentPosition","enableHighAccuracy","maximumAge","timeout","Fragment","src","alt","Weather","lazy","__webpack_require__","then","bind","buildScalableParamsQuery","params","concat","api","query","join","App","temperature","maxTemp","minTemp","humidity","description","code","searched","loading","showError","newTab","errorMessage","apiRequestURL","length","axios","get","response","weather","data","main","temp","temp_max","temp_min","sys","icon","catch","toggleErrorVisibility","geolocator","components_Form_form","react","fallback","spinner","delayMs","maxtemp","mintemp","unmountMe","navbar","getForecast","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister","Error","toggleError","duration","setTimeout"],"mappings":"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","file":"static/js/main.da27b93c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './styles.css';\r\n\r\nclass Spinner extends Component {\r\n    render() {\r\n        return(\r\n            <div className=\"Spinner\">\r\n                <div className=\"loader\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Spinner;","export const APP_ID = \"8d2de98e089f1c28e1a22fc19a24ef04\";\r\nexport const BASE_URL ='https://api.openweathermap.org/data/2.5/weather';\r\nexport const OPTIONS = 'units=metric';","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './form.css';\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            city: '',\r\n            country: '',\r\n            submitted: false,\r\n        }\r\n    }\r\n\r\n    handleCountryChange = (event) => {\r\n        this.setState({\r\n            country: event.target.value\r\n        })\r\n    }\r\n\r\n    handleCityChange = (event) => {\r\n        this.setState({\r\n            city: event.target.value\r\n        })\r\n    }\r\n\r\n    handleOnClickSubmit = (e) => {\r\n        e.preventDefault();\r\n        //this.props.loadWeather(this.state);\r\n        this.props.searchWeatherBy([this.state.city, this.state.country])\r\n        \r\n        this.props.handleFormClick();\r\n        this.resetForm();\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState({\r\n            city: '',\r\n            country: '',\r\n            submitted: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form id=\"weatherForm\" className=\"Form\">\r\n                <input \r\n                    className=\"Form__input\"\r\n                    type=\"text\"\r\n                    name=\"city\"\r\n                    value={this.state.city}\r\n                    placeholder={(this.state.submitted ? 'Another city..' : 'City..')}\r\n                    onChange={this.handleCityChange}\r\n                    autoFocus\r\n                    autoComplete=\"off\"\r\n                />\r\n\r\n                <input \r\n                    className=\"Form__input\"\r\n                    type=\"text\"\r\n                    name=\"country\"\r\n                    placeholder=\"Country...\"\r\n                    value={this.state.country}\r\n                    onChange={this.handleCountryChange}\r\n                    autoComplete=\"off\"\r\n                />\r\n\r\n                <button \r\n                    onClick={this.handleOnClickSubmit} \r\n                    type=\"submit\" \r\n                    className=\"Form__submit\">\r\n                    {(this.state.submitted ? \"Find another place\" : 'Look up the weather')}\r\n                </button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nForm.propTypes = {\r\n    loadWeather: PropTypes.func,\r\n    handleFormClick: PropTypes.func\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\nclass Navbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tab: 'current'\r\n        }\r\n    }\r\n\r\n    changeTabOnClick = (clickedTab) => {\r\n        this.setState({ tab: clickedTab })\r\n        this.props.changeTabState(clickedTab);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Navbar\">\r\n                <button className={\"Navbar__tab\" + (this.state.tab === 'current' ? ' active' : '')} \r\n                        onClick={() => this.changeTabOnClick('current')}>\r\n                        current\r\n                </button>\r\n\r\n                <button className={\"Navbar__tab\" + (this.state.tab === 'forecast' ? ' active' : '')} \r\n                        onClick={() => this.changeTabOnClick('forecast')}>\r\n                        forecast\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nNavbar.propTypes = {\r\n    changeTabState: PropTypes.func,\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\nimport '../Error/error';\r\n\r\nclass Geolocator extends Component {\r\n       \r\n    state = {\r\n        lat: undefined,\r\n        lng: undefined,\r\n        error: undefined,\r\n        requested: false,\r\n        loaded: false,\r\n    }\r\n\r\n    onLocateSuccess = position => {\r\n        const coords = position.coords;\r\n        this.setState({\r\n            lat: coords.latitude,\r\n            lng: coords.longitude,\r\n            requested: true,\r\n            loaded: true\r\n        })\r\n        this.props.searchWeatherBy([this.state.lat, this.state.lng], 'geo');\r\n    }\r\n\r\n    onLocateError = err => {\r\n        this.setState({\r\n            requested: true,\r\n            loaded: true,\r\n            error: err.message\r\n        })\r\n        this.props.handleError(err.message)\r\n    }\r\n\r\n    getLocation = () => {\r\n        this.setState({\r\n            requested: true,\r\n            loaded: false\r\n        })\r\n\r\n        const options = {\r\n            enableHighAccuracy: true,\r\n            maximumAge: 0,\r\n            timeout: 15000\r\n        };\r\n\r\n        navigator.geolocation.getCurrentPosition(this.onLocateSuccess, this.onLocateError, options);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <img \r\n                    src=\"../svg/geolocate.svg\"\r\n                    className={\"Geolocator__icon\" + (this.state.requested && !this.state.loaded ? ' spin' : '')}\r\n                    alt=\"Geolocate me\"\r\n                    onClick={this.getLocation}\r\n                />\r\n                { this.state.requested && !this.state.loaded \r\n                    ? <div className=\"Geolocator__loading\"></div>\r\n                    : ''\r\n                }\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nGeolocator.propTypes = {\r\n    getGeoWeather: PropTypes.func,\r\n    handleError: PropTypes.func,\r\n}\r\n\r\nexport default Geolocator;","import React, { Suspense, lazy, Component } from 'react';\r\nimport axios from 'axios';\r\nimport './styles.css';\r\nimport * as api from './constants/apiConstants';\r\n\r\nimport Form from './components/Form/form';\r\nimport Navbar from './components/Navbar/navbar';\r\nimport Geolocator from './components/Geolocator/geolocator';\r\nimport Error from './components/Error/error';\r\nimport Spinner from './components/Spinner/spinner';\r\n\r\nconst Weather = lazy(() => import('./components/Weather/weather'));\r\n\r\nconst buildScalableParamsQuery = (params, type) => {\r\n  switch(type) {\r\n    case 'geo': \r\n      return `${api.BASE_URL}?lat=${params[0]}&lon=${params[1]}&appid=${api.APP_ID}&${api.OPTIONS}`;\r\n    case 'forecast': \r\n      return 1; //@TO-DO: forecast query when type === 'forecast'\r\n    default:\r\n      const query = params.join(',');\r\n      return `${api.BASE_URL}?q=${query}&appid=${api.APP_ID}&${api.OPTIONS}`;\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  state = {\r\n    tab: 'current',\r\n    temperature: undefined,\r\n    maxTemp: undefined,\r\n    minTemp: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    code: undefined,\r\n    searched: false,\r\n    loading: false,\r\n    showError: true,\r\n    error: null,\r\n  }\r\n\r\n  componentDidCatch(err) {\r\n    this.setState({ error: err })\r\n    this.handleError(err)\r\n  }\r\n\r\n  changeTabState = newTab => {\r\n    this.setState({ \r\n      tab: newTab \r\n    })\r\n  }\r\n\r\n  handleFormClick = () => {\r\n    this.setState({ \r\n      searched: true \r\n    })\r\n  }\r\n\r\n  handleError = errorMessage => {\r\n    this.setState({\r\n      showError: true,\r\n      error: errorMessage,\r\n      loading: false\r\n    })\r\n  }\r\n\r\n  searchWeatherBy = (params, type) => {\r\n    const apiRequestURL = buildScalableParamsQuery(params, type);\r\n    if (params.length > 0) {\r\n      this.setState(\r\n        () => ({ loading: true }),\r\n        () => {\r\n          axios.get(apiRequestURL)\r\n          .then(response => {\r\n            const weather = response.data;\r\n            this.setState({\r\n              temperature: weather.main.temp,\r\n              maxTemp: weather.main.temp_max,\r\n              minTemp: weather.main.temp_min,\r\n              city: weather.name,\r\n              country: weather.sys.country,\r\n              humidity: weather.main.humidity,\r\n              description: weather.weather[0].description,\r\n              code: weather.weather[0].icon,\r\n              error: null,\r\n              showError: true,\r\n              loading: false,\r\n              searched: true\r\n            })\r\n          }).catch((err) => {\r\n            this.handleError('Is that even a place? Try another location!');\r\n          })\r\n        }\r\n      )\r\n    } else {\r\n      this.handleError('Please fill both inputs before searching.');\r\n    }\r\n  }\r\n\r\n  toggleErrorVisibility = () => {\r\n    this.setState({\r\n      showError: false\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"WinterIO\">\r\n          <Geolocator \r\n            handleError={this.handleError}\r\n            searchWeatherBy={this.searchWeatherBy}\r\n          />\r\n\r\n          <Form \r\n            searchWeatherBy={this.searchWeatherBy}\r\n            handleFormClick={this.handleFormClick}\r\n            handleError={this.handleError}\r\n          />\r\n\r\n          { this.state.searched && !this.state.error && (\r\n            <Suspense \r\n              fallback={<Spinner />} \r\n              delayMs={1000} \r\n            >\r\n               <Weather\r\n                    temperature={this.state.temperature}\r\n                    maxtemp={this.state.maxTemp}\r\n                    mintemp={this.state.minTemp}\r\n                    city={this.state.city}\r\n                    country={this.state.country}\r\n                    humidity={this.state.humidity}\r\n                    description={this.state.description}\r\n                    code={this.state.code}\r\n                    error={this.state.error}\r\n                    loaded={!this.state.loading}\r\n                    searched={this.state.searched} // @TO-DO: Apply CSSTransition on mount so this prop is not necessary \r\n                />\r\n            </Suspense>\r\n          )}\r\n\r\n          { this.state.showError && this.state.error ?\r\n              <Error\r\n                message={this.state.error} \r\n                unmountMe={this.toggleErrorVisibility}\r\n              />\r\n            : null \r\n          }\r\n\r\n          <Navbar\r\n            changeTabState={this.changeTabState}\r\n            getForecast={this.getForecast}\r\n          />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './resets.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\nclass Error extends Component {\r\n\r\n    componentDidMount() {\r\n        this.toggleError(2000)\r\n    }\r\n\r\n    toggleError = (duration) => {\r\n        setTimeout(() => {\r\n            this.props.unmountMe();\r\n        }, duration);\r\n    }\r\n\r\n    // Apply Transitions to the Error component first to learn\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Error\">\r\n                <span>{this.props.message}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nError.propTypes = {\r\n    unmountMe: PropTypes.func,\r\n    message: PropTypes.string,\r\n}\r\n\r\nexport default Error;"],"sourceRoot":""}